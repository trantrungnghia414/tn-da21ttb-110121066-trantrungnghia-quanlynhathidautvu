import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import { fetchApi } from "@/lib/api";
import { Court } from "../../courts/types/courtTypes";
import { Loader2 } from "lucide-react";
import { CourtMapping, CourtMappingFormData } from "../types";

// ƒê·ªãnh nghƒ©a c√°c v·ªã tr√≠ c·ªë ƒë·ªãnh (s·∫Ω kh√¥ng s·ª≠ d·ª•ng n·ªØa)
// const POSITIONS = [
//     { value: "Tr√°i", label: "Tr√°i" },
//     { value: "Gi·ªØa", label: "Gi·ªØa" },
//     { value: "Ph·∫£i", label: "Ph·∫£i" },
// ];

// ‚úÖ H√†m t·∫°o v·ªã tr√≠ ƒë·ªông d·ª±a v√†o s·ªë l∆∞·ª£ng s√¢n con c·ªßa s√¢n cha
const generatePositions = (subCourtCount: number) => {
    const positions = [];
    for (let i = 1; i <= subCourtCount; i++) {
        positions.push({
            value: i.toString(),
            label: `V·ªã tr√≠ ${i}`,
        });
    }
    return positions;
};

// ‚úÖ ƒê·ªãnh nghƒ©a c√°c c·∫•p ƒë·ªô s√¢n
const COURT_LEVELS = {
    SMALL: 1, // S√¢n nh·ªè
    MEDIUM: 2, // S√¢n v·ª´a
    LARGE: 3, // S√¢n l·ªõn
};

interface CourtMappingFormProps {
    onSubmit: (data: CourtMappingFormData) => Promise<void>;
    existingMapping?: CourtMapping | null;
    onCancel: () => void;
}

export default function CourtMappingForm({
    onSubmit,
    existingMapping,
    onCancel,
}: CourtMappingFormProps) {
    const [courts, setCourts] = useState<Court[]>([]);
    const [parentCourtId, setParentCourtId] = useState<string>("");
    const [childCourtId, setChildCourtId] = useState<string>("");
    const [position, setPosition] = useState<string>("Tr√°i");
    const [saving, setSaving] = useState<boolean>(false);
    const [loading, setLoading] = useState<boolean>(true);
    const [formInitialized, setFormInitialized] = useState<boolean>(false);
    const [usedPositions, setUsedPositions] = useState<string[]>([]);

    const router = useRouter();

    // Fetch danh s√°ch s√¢n
    useEffect(() => {
        const fetchCourts = async () => {
            try {
                setLoading(true);
                const token = localStorage.getItem("token");
                if (!token) {
                    toast.error("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n");
                    router.push("/login");
                    return;
                }

                const response = await fetchApi("/courts", {
                    headers: { Authorization: `Bearer ${token}` },
                });

                if (response.ok) {
                    const data = await response.json();

                    // ‚úÖ Debug: Log d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
                    console.log("üìä All courts data:", data);
                    console.log(
                        "üìä Courts with court_level:",
                        data.filter((court: Court) => court.court_level)
                    );

                    setCourts(data);
                } else {
                    throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s√¢n");
                }
            } catch (error) {
                console.error("Error fetching courts:", error);
                toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s√¢n");
            } finally {
                setLoading(false);
            }
        };

        fetchCourts();
    }, [router]);

    // L·∫•y danh s√°ch v·ªã tr√≠ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng khi s√¢n cha thay ƒë·ªïi
    useEffect(() => {
        const fetchUsedPositions = async () => {
            if (!parentCourtId) {
                setUsedPositions([]);
                return;
            }

            try {
                const token = localStorage.getItem("token");
                if (!token) return;

                const response = await fetchApi("/court-mappings", {
                    headers: { Authorization: `Bearer ${token}` },
                });

                if (response.ok) {
                    const mappings = await response.json();

                    const parentMappings = mappings.filter(
                        (mapping: CourtMapping) =>
                            mapping.parent_court_id.toString() ===
                                parentCourtId &&
                            (!existingMapping ||
                                mapping.mapping_id !==
                                    existingMapping.mapping_id)
                    );

                    const positions = parentMappings
                        .map((mapping: CourtMapping) => mapping.position)
                        .filter(Boolean);

                    setUsedPositions(positions);
                }
            } catch (error) {
                console.error("Error fetching court mappings:", error);
            }
        };

        fetchUsedPositions();
    }, [parentCourtId, existingMapping]);

    // Set gi√° tr·ªã ban ƒë·∫ßu khi ch·ªânh s·ª≠a
    useEffect(() => {
        if (!formInitialized && courts.length > 0 && existingMapping) {
            setParentCourtId(existingMapping.parent_court_id.toString());
            setChildCourtId(existingMapping.child_court_id.toString());
            setPosition(existingMapping.position || "Tr√°i");
            setFormInitialized(true);
        }
    }, [courts, existingMapping, formInitialized]);

    // Reset form khi existingMapping thay ƒë·ªïi
    useEffect(() => {
        if (!existingMapping || (existingMapping && formInitialized)) {
            setParentCourtId(existingMapping?.parent_court_id.toString() || "");
            setChildCourtId(existingMapping?.child_court_id.toString() || "");
            setPosition(existingMapping?.position || "Tr√°i");
            setFormInitialized(!!existingMapping);
        }
    }, [existingMapping, formInitialized]);

    // ‚úÖ L·ªçc s√¢n cha: ch·ªâ hi·ªÉn th·ªã s√¢n c·∫•p 2 v√† 3
    const parentCourts = courts.filter((court) => {
        const courtLevel = court.court_level;
        // Ch·∫•p nh·∫≠n c·∫£ number v√† string, convert v·ªÅ number ƒë·ªÉ so s√°nh
        const level =
            typeof courtLevel === "string"
                ? parseInt(courtLevel, 10)
                : courtLevel;

        return (
            level && [COURT_LEVELS.MEDIUM, COURT_LEVELS.LARGE].includes(level)
        );
    });

    // ‚úÖ L·ªçc s√¢n con d·ª±a theo c√°c ti√™u ch√≠ m·ªõi
    const getChildCourts = () => {
        if (!parentCourtId) return [];

        const selectedParentCourt = courts.find(
            (court) => court.court_id.toString() === parentCourtId
        );

        if (!selectedParentCourt || !selectedParentCourt.court_level) return [];

        const parentLevel =
            typeof selectedParentCourt.court_level === "string"
                ? parseInt(selectedParentCourt.court_level, 10)
                : selectedParentCourt.court_level;

        return courts.filter((court) => {
            const childLevel =
                typeof court.court_level === "string"
                    ? parseInt(court.court_level, 10)
                    : court.court_level;

            // 1. S√¢n con c·∫•p ph·∫£i nh·ªè h∆°n s√¢n cha
            if (!childLevel || childLevel >= parentLevel) {
                return false;
            }

            // 2. S√¢n con ph·∫£i c√πng nh√† thi ƒë·∫•u v·ªõi s√¢n cha
            if (court.venue_id !== selectedParentCourt.venue_id) {
                return false;
            }

            // 3. S√¢n con ph·∫£i c√πng lo·∫°i (trong nh√†/ngo√†i tr·ªùi) v·ªõi s√¢n cha
            if (court.is_indoor !== selectedParentCourt.is_indoor) {
                return false;
            }

            // 4. Kh√¥ng ƒë∆∞·ª£c ch·ªçn ch√≠nh s√¢n cha
            if (court.court_id.toString() === parentCourtId) {
                return false;
            }

            return true;
        });
    };

    const childCourts = getChildCourts();

    // ‚úÖ Reset s√¢n con khi s√¢n cha thay ƒë·ªïi
    useEffect(() => {
        if (parentCourtId && !existingMapping) {
            setChildCourtId("");
        }
    }, [parentCourtId, existingMapping]);

    // ‚úÖ T·∫°o danh s√°ch v·ªã tr√≠ c√≥ th·ªÉ ch·ªçn d·ª±a v√†o s√¢n cha
    const getAvailablePositions = () => {
        if (!parentCourtId) {
            return [];
        }

        const selectedParentCourt = courts.find(
            (court) => court.court_id.toString() === parentCourtId
        );

        if (!selectedParentCourt?.sub_court_count) {
            return [];
        }

        // T·∫°o t·∫•t c·∫£ v·ªã tr√≠ c√≥ th·ªÉ d·ª±a v√†o sub_court_count
        const allPositions = generatePositions(
            selectedParentCourt.sub_court_count
        );

        // L·ªçc ra nh·ªØng v·ªã tr√≠ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
        return allPositions.filter(
            (pos: { value: string; label: string }) =>
                !usedPositions.includes(pos.value)
        );
    };

    const availablePositions = getAvailablePositions();

    // T·ª± ƒë·ªông ch·ªçn v·ªã tr√≠ ƒë·∫ßu ti√™n c√≥ s·∫µn n·∫øu v·ªã tr√≠ hi·ªán t·∫°i ƒë√£ b·ªã s·ª≠ d·ª•ng
    useEffect(() => {
        if (
            parentCourtId &&
            usedPositions.includes(position) &&
            availablePositions.length > 0
        ) {
            if (existingMapping && existingMapping.position === position) {
                return;
            }
            setPosition(availablePositions[0].value);
        }
    }, [
        parentCourtId,
        usedPositions,
        position,
        availablePositions,
        existingMapping,
    ]);

    // ‚úÖ H√†m helper ƒë·ªÉ l·∫•y t√™n c·∫•p ƒë·ªô s√¢n
    const getCourtLevelName = (level: number | string): string => {
        const numLevel =
            typeof level === "string" ? parseInt(level, 10) : level;

        switch (numLevel) {
            case COURT_LEVELS.SMALL:
                return "C·∫•p 1 (Nh·ªè)";
            case COURT_LEVELS.MEDIUM:
                return "C·∫•p 2 (V·ª´a)";
            case COURT_LEVELS.LARGE:
                return "C·∫•p 3 (L·ªõn)";
            default:
                return "Kh√¥ng x√°c ƒë·ªãnh";
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!parentCourtId) {
            toast.error("Vui l√≤ng ch·ªçn s√¢n cha");
            return;
        }

        if (!childCourtId) {
            toast.error("Vui l√≤ng ch·ªçn s√¢n con");
            return;
        }

        if (parentCourtId === childCourtId) {
            toast.error("S√¢n cha v√† s√¢n con kh√¥ng th·ªÉ l√† c√πng m·ªôt s√¢n");
            return;
        }

        // ‚úÖ Ki·ªÉm tra c·∫•p ƒë·ªô s√¢n cha v√† s√¢n con
        const parentCourt = courts.find(
            (court) => court.court_id.toString() === parentCourtId
        );
        const childCourt = courts.find(
            (court) => court.court_id.toString() === childCourtId
        );

        if (!parentCourt || !childCourt) {
            toast.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin s√¢n");
            return;
        }

        const parentLevel =
            typeof parentCourt.court_level === "string"
                ? parseInt(parentCourt.court_level, 10)
                : parentCourt.court_level;
        const childLevel =
            typeof childCourt.court_level === "string"
                ? parseInt(childCourt.court_level, 10)
                : childCourt.court_level;

        // Ki·ªÉm tra logic c·∫•p ƒë·ªô
        if (
            parentLevel === COURT_LEVELS.MEDIUM &&
            childLevel !== COURT_LEVELS.SMALL
        ) {
            toast.error("S√¢n cha c·∫•p v·ª´a ch·ªâ c√≥ th·ªÉ gh√©p v·ªõi s√¢n con c·∫•p nh·ªè");
            return;
        }

        if (
            parentLevel === COURT_LEVELS.LARGE &&
            ![COURT_LEVELS.SMALL, COURT_LEVELS.MEDIUM].includes(childLevel!)
        ) {
            toast.error(
                "S√¢n cha c·∫•p l·ªõn ch·ªâ c√≥ th·ªÉ gh√©p v·ªõi s√¢n con c·∫•p nh·ªè ho·∫∑c c·∫•p v·ª´a"
            );
            return;
        }

        // Ki·ªÉm tra v·ªã tr√≠ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ch∆∞a
        if (usedPositions.includes(position)) {
            toast.error(`V·ªã tr√≠ ${position} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong s√¢n cha n√†y`);
            return;
        }

        setSaving(true);

        try {
            const mappingData: CourtMappingFormData = {
                parent_court_id: parseInt(parentCourtId),
                child_court_id: parseInt(childCourtId),
                position: position,
            };

            await onSubmit(mappingData);
        } catch (error) {
            console.error("Error submitting court mapping:", error);
            toast.error("C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin");
        } finally {
            setSaving(false);
        }
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-4">
                <div className="space-y-2">
                    <Label htmlFor="parentCourt">
                        S√¢n cha (c·∫•p v·ª´a/l·ªõn){" "}
                        <span className="text-red-500">*</span>
                    </Label>
                    <Select
                        value={parentCourtId}
                        onValueChange={setParentCourtId}
                        disabled={loading || saving}
                    >
                        <SelectTrigger id="parentCourt">
                            <SelectValue placeholder="Ch·ªçn s√¢n cha (c·∫•p 2 ho·∫∑c 3)" />
                        </SelectTrigger>
                        <SelectContent>
                            {parentCourts.map((court) => (
                                <SelectItem
                                    key={court.court_id}
                                    value={court.court_id.toString()}
                                >
                                    <div className="flex flex-col">
                                        <span className="font-medium">
                                            {court.name} ({court.code})
                                        </span>
                                        <span className="text-xs text-gray-500">
                                            {getCourtLevelName(
                                                court.court_level!
                                            )}{" "}
                                            ‚Ä¢{" "}
                                            {court.type_name ||
                                                "Kh√¥ng x√°c ƒë·ªãnh"}
                                        </span>
                                    </div>
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>

                    {/* ‚úÖ Hi·ªÉn th·ªã th√¥ng tin debug */}
                    {!loading && (
                        <div className="text-xs text-gray-500">
                            <p>üìä T·ªïng s·ªë s√¢n: {courts.length}</p>
                            <p>
                                üéØ S√¢n c·∫•p 2 & 3 kh·∫£ d·ª•ng: {parentCourts.length}
                            </p>
                        </div>
                    )}

                    {parentCourts.length === 0 && !loading && (
                        <p className="text-xs text-red-500">
                            Kh√¥ng c√≥ s√¢n c·∫•p v·ª´a (2) ho·∫∑c l·ªõn (3) n√†o kh·∫£ d·ª•ng
                        </p>
                    )}
                </div>

                <div className="space-y-2">
                    <Label htmlFor="childCourt">
                        S√¢n con <span className="text-red-500">*</span>
                    </Label>
                    <Select
                        value={childCourtId}
                        onValueChange={setChildCourtId}
                        disabled={loading || saving || !parentCourtId}
                    >
                        <SelectTrigger id="childCourt">
                            <SelectValue
                                placeholder={
                                    !parentCourtId
                                        ? "Vui l√≤ng ch·ªçn s√¢n cha tr∆∞·ªõc"
                                        : childCourts.length === 0
                                        ? "Kh√¥ng c√≥ s√¢n con ph√π h·ª£p"
                                        : "Ch·ªçn s√¢n con"
                                }
                            />
                        </SelectTrigger>
                        <SelectContent>
                            {childCourts.map((court) => (
                                <SelectItem
                                    key={court.court_id}
                                    value={court.court_id.toString()}
                                >
                                    <div className="flex flex-col">
                                        <span className="font-medium">
                                            {court.name} ({court.code})
                                        </span>
                                        <span className="text-xs text-gray-500">
                                            {getCourtLevelName(
                                                court.court_level!
                                            )}{" "}
                                            ‚Ä¢{" "}
                                            {court.type_name ||
                                                "Kh√¥ng x√°c ƒë·ªãnh"}
                                        </span>
                                    </div>
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                    {parentCourtId && (
                        <p className="text-xs text-muted-foreground">
                            {(() => {
                                const selectedParent = courts.find(
                                    (c) =>
                                        c.court_id.toString() === parentCourtId
                                );
                                if (!selectedParent) return "";

                                const parentLevel =
                                    typeof selectedParent.court_level ===
                                    "string"
                                        ? parseInt(
                                              selectedParent.court_level,
                                              10
                                          )
                                        : selectedParent.court_level;

                                if (parentLevel === COURT_LEVELS.MEDIUM) {
                                    return "S√¢n cha c·∫•p v·ª´a ‚Üí Ch·ªâ c√≥ th·ªÉ ch·ªçn s√¢n con c·∫•p nh·ªè";
                                } else if (parentLevel === COURT_LEVELS.LARGE) {
                                    return "S√¢n cha c·∫•p l·ªõn ‚Üí C√≥ th·ªÉ ch·ªçn s√¢n con c·∫•p v·ª´a ho·∫∑c nh·ªè";
                                }
                                return "";
                            })()}
                        </p>
                    )}
                </div>

                <div className="space-y-2">
                    <Label htmlFor="position">
                        V·ªã tr√≠ trong s√¢n l·ªõn{" "}
                        <span className="text-red-500">*</span>
                    </Label>
                    <Select
                        value={position}
                        onValueChange={setPosition}
                        disabled={
                            saving ||
                            (!availablePositions.length && !existingMapping)
                        }
                    >
                        <SelectTrigger id="position">
                            <SelectValue
                                placeholder={
                                    !parentCourtId
                                        ? "Vui l√≤ng ch·ªçn s√¢n cha tr∆∞·ªõc"
                                        : !availablePositions.length &&
                                          !existingMapping
                                        ? "S√¢n cha ƒë√£ h·∫øt v·ªã tr√≠"
                                        : "Ch·ªçn v·ªã tr√≠"
                                }
                            />
                        </SelectTrigger>
                        <SelectContent>
                            {existingMapping && existingMapping.position ? (
                                <SelectItem
                                    key={existingMapping.position}
                                    value={existingMapping.position}
                                >
                                    {`V·ªã tr√≠ ${existingMapping.position}`}
                                </SelectItem>
                            ) : null}

                            {availablePositions
                                .filter(
                                    (pos: { value: string; label: string }) =>
                                        !existingMapping ||
                                        pos.value !== existingMapping.position
                                )
                                .map(
                                    (pos: { value: string; label: string }) => (
                                        <SelectItem
                                            key={pos.value}
                                            value={pos.value}
                                        >
                                            {pos.label}
                                        </SelectItem>
                                    )
                                )}
                        </SelectContent>
                    </Select>
                    {usedPositions.length > 0 && (
                        <p className="text-xs text-muted-foreground">
                            V·ªã tr√≠ ƒë√£ s·ª≠ d·ª•ng: {usedPositions.join(", ")}
                        </p>
                    )}
                    {parentCourtId &&
                        !availablePositions.length &&
                        !existingMapping && (
                            <p className="text-xs text-red-500">
                                S√¢n cha n√†y ƒë√£ s·ª≠ d·ª•ng h·∫øt c√°c v·ªã tr√≠ c√≥ s·∫µn
                            </p>
                        )}
                </div>
            </div>

            <div className="flex justify-end gap-2 pt-4">
                <Button
                    type="button"
                    variant="outline"
                    onClick={onCancel}
                    disabled={saving}
                >
                    H·ªßy
                </Button>
                <Button
                    type="submit"
                    disabled={
                        saving ||
                        loading ||
                        !parentCourtId ||
                        !childCourtId ||
                        (!availablePositions.length && !existingMapping)
                    }
                >
                    {saving && (
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    {existingMapping ? "C·∫≠p nh·∫≠t" : "Th√™m m·ªõi"}
                </Button>
            </div>
        </form>
    );
}
